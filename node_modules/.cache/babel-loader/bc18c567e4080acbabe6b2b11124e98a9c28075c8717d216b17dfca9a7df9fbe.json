{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  c;\n  useEffect(() => {\n    const updateStage = prevStage => {\n      // Flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n\n      // Draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n\n      // Check if we collided\n      if (player.collided) {\n        resetPlayer();\n      }\n      return newStage;\n    };\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage];\n};\n_s(useStage, \"5P+otx0I7S1W+XNBDZZ95jKxV+k=\");","map":{"version":3,"names":["useState","useEffect","createStage","useStage","player","resetPlayer","_s","stage","setStage","c","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","pos","collided","prev"],"sources":["D:/Downloads/tetris/src/hooks/useStage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport { createStage } from \"../gameHelpers\";\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n    const [stage, setStage] = useState(createStage());\r\n    c\r\n\r\n    useEffect(() => {\r\n        const updateStage = prevStage => {\r\n            // Flush the stage\r\n            const newStage = prevStage.map(row =>\r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\r\n            );\r\n\r\n            // Draw the tetromino\r\n            player.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        newStage[y + player.pos.y][x + player.pos.x] = [\r\n                            value,\r\n                            `${player.collided ? 'merged' : 'clear'}`,\r\n                        ]\r\n                    }\r\n                })\r\n            })\r\n\r\n            // Check if we collided\r\n            if (player.collided) {\r\n                resetPlayer();\r\n            }\r\n            return newStage;\r\n        };\r\n\r\n        setStage(prev => updateStage(prev))\r\n\r\n    }, [player, resetPlayer])\r\n\r\n    return [stage, setStage];\r\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,WAAW,QAAQ,gBAAgB;AAE5C,OAAO,MAAMC,QAAQ,GAAGA,CAACC,MAAM,EAAEC,WAAW,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACE,WAAW,CAAC,CAAC,CAAC;EACjDO,CAAC;EAEDR,SAAS,CAAC,MAAM;IACZ,MAAMS,WAAW,GAAGC,SAAS,IAAI;MAC7B;MACA,MAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAG,CAACC,GAAG,IAC9BA,GAAG,CAACD,GAAG,CAACE,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,GAAGA,IAAK,CAC/D,CAAC;;MAED;MACAX,MAAM,CAACY,SAAS,CAACC,OAAO,CAAC,CAACH,GAAG,EAAEI,CAAC,KAAK;QACjCJ,GAAG,CAACG,OAAO,CAAC,CAACE,KAAK,EAAEC,CAAC,KAAK;UACtB,IAAID,KAAK,KAAK,CAAC,EAAE;YACbP,QAAQ,CAACM,CAAC,GAAGd,MAAM,CAACiB,GAAG,CAACH,CAAC,CAAC,CAACE,CAAC,GAAGhB,MAAM,CAACiB,GAAG,CAACD,CAAC,CAAC,GAAG,CAC3CD,KAAK,EACL,GAAGf,MAAM,CAACkB,QAAQ,GAAG,QAAQ,GAAG,OAAO,EAAE,CAC5C;UACL;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;;MAEF;MACA,IAAIlB,MAAM,CAACkB,QAAQ,EAAE;QACjBjB,WAAW,CAAC,CAAC;MACjB;MACA,OAAOO,QAAQ;IACnB,CAAC;IAEDJ,QAAQ,CAACe,IAAI,IAAIb,WAAW,CAACa,IAAI,CAAC,CAAC;EAEvC,CAAC,EAAE,CAACnB,MAAM,EAAEC,WAAW,CAAC,CAAC;EAEzB,OAAO,CAACE,KAAK,EAAEC,QAAQ,CAAC;AAC5B,CAAC;AAAAF,EAAA,CAnCYH,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}