{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\nimport { STAGE_WIDTH } from \"../gameHelpers\";\nexport const usePlayer = () => {\n  _s();\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n  const rotate = (matrix, dir) => {\n    // Transpose rows and columns\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]));\n    // Reverse eacch row to get the rotated matrix\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  };\n  const playerRotate = (stage, dir) => {\n    const clonePlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n    setPlayer(clonedPlayer);\n  };\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n_s(usePlayer, \"w+oL+pbXkO2fMLB5BJ01GDank3Y=\");","map":{"version":3,"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","usePlayer","_s","player","setPlayer","pos","x","y","tetromino","shape","collided","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonePlayer","JSON","parse","stringify","clonedPlayer","offset","checkCollision","length","updatePlayerPos","prev","resetPlayer"],"sources":["D:/Downloads/tetris/src/hooks/usePlayer.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\r\nimport { STAGE_WIDTH } from \"../gameHelpers\";\r\n\r\nexport const usePlayer = () => {\r\n    const [player, setPlayer] = useState({\r\n        pos: { x: 0, y: 0 },\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false\r\n    });\r\n\r\n    const rotate = (matrix, dir) => {\r\n        // Transpose rows and columns\r\n        const rotatedTetro = matrix.map((_, index) =>\r\n            matrix.map(col => col[index])\r\n        );\r\n        // Reverse eacch row to get the rotated matrix\r\n        if (dir > 0) return rotatedTetro.map(row => row.reverse());\r\n        return rotatedTetro.reverse();\r\n    }\r\n\r\n    const playerRotate = (stage, dir) => {\r\n        const clonePlayer = JSON.parse(JSON.stringify(player));\r\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n        const pos = clonedPlayer.pos.x;\r\n        let offset = 1;\r\n        while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n            clonedPlayer.pos.x += offset;\r\n            offset = -(offset + (offset > 0 ? 1 : -1));\r\n            if (offset > clonedPlayer.tetromino[0].length) {\r\n                rotate(clonedPlayer.tetromino, -dir);\r\n                clonedPlayer.pos.x = pos;\r\n                return;\r\n            }\r\n        }\r\n\r\n        setPlayer(clonedPlayer)\r\n    }\r\n\r\n    const updatePlayerPos = ({ x, y, collided }) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n            collided,\r\n        }));\r\n    }\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n            tetromino: randomTetromino().shape,\r\n            collided: false\r\n        })\r\n    }, [])\r\n\r\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}