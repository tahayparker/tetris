{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, etRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return ack;\n      }\n      ack.push(row);\n      return ack;\n    }, []);\n    const updateStage = prevStage => {\n      // Flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n\n      // Draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n\n      // Check if we collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};\n_s(useStage, \"maMn1+LTPa2y7ebGbYKxZXZ7pC4=\");","map":{"version":3,"names":["useState","useEffect","createStage","useStage","player","resetPlayer","_s","stage","setStage","rowsCleared","etRowsCleared","setRowsCleared","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","pos","collided"],"sources":["D:/Downloads/tetris/src/hooks/useStage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport { createStage } from \"../gameHelpers\";\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n    const [stage, setStage] = useState(createStage());\r\n    const [rowsCleared, etRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setRowsCleared(0);\r\n\r\n        const sweepRows = newStage =>\r\n            newStage.reduce((ack, row) => {\r\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n                    setRowsCleared(prev => prev + 1);\r\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n                    return ack;\r\n                }\r\n                ack.push(row);\r\n                return ack;\r\n            }, [])\r\n\r\n        const updateStage = prevStage => {\r\n            // Flush the stage\r\n            const newStage = prevStage.map(row =>\r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\r\n            );\r\n\r\n            // Draw the tetromino\r\n            player.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        newStage[y + player.pos.y][x + player.pos.x] = [\r\n                            value,\r\n                            `${player.collided ? 'merged' : 'clear'}`,\r\n                        ]\r\n                    }\r\n                })\r\n            })\r\n\r\n            // Check if we collided\r\n            if (player.collided) {\r\n                resetPlayer();\r\n                return sweepRows(newStage);\r\n            }\r\n            return newStage;\r\n        };\r\n\r\n        setStage(prev => updateStage(prev))\r\n\r\n    }, [player, resetPlayer])\r\n\r\n    return [stage, setStage, rowsCleared];\r\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,WAAW,QAAQ,gBAAgB;AAE5C,OAAO,MAAMC,QAAQ,GAAGA,CAACC,MAAM,EAAEC,WAAW,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACE,WAAW,CAAC,CAAC,CAAC;EACjD,MAAM,CAACO,WAAW,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACZU,cAAc,CAAC,CAAC,CAAC;IAEjB,MAAMC,SAAS,GAAGC,QAAQ,IACtBA,QAAQ,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;MAC1B,IAAIA,GAAG,CAACC,SAAS,CAACC,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;QAC7CP,cAAc,CAACQ,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;QAChCJ,GAAG,CAACK,OAAO,CAAC,IAAIC,KAAK,CAACR,QAAQ,CAAC,CAAC,CAAC,CAACS,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;QAC7D,OAAOR,GAAG;MACd;MACAA,GAAG,CAACS,IAAI,CAACR,GAAG,CAAC;MACb,OAAOD,GAAG;IACd,CAAC,EAAE,EAAE,CAAC;IAEV,MAAMU,WAAW,GAAGC,SAAS,IAAI;MAC7B;MACA,MAAMb,QAAQ,GAAGa,SAAS,CAACC,GAAG,CAACX,GAAG,IAC9BA,GAAG,CAACW,GAAG,CAACT,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,GAAGA,IAAK,CAC/D,CAAC;;MAED;MACAd,MAAM,CAACwB,SAAS,CAACC,OAAO,CAAC,CAACb,GAAG,EAAEc,CAAC,KAAK;QACjCd,GAAG,CAACa,OAAO,CAAC,CAACE,KAAK,EAAEC,CAAC,KAAK;UACtB,IAAID,KAAK,KAAK,CAAC,EAAE;YACblB,QAAQ,CAACiB,CAAC,GAAG1B,MAAM,CAAC6B,GAAG,CAACH,CAAC,CAAC,CAACE,CAAC,GAAG5B,MAAM,CAAC6B,GAAG,CAACD,CAAC,CAAC,GAAG,CAC3CD,KAAK,EACL,GAAG3B,MAAM,CAAC8B,QAAQ,GAAG,QAAQ,GAAG,OAAO,EAAE,CAC5C;UACL;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;;MAEF;MACA,IAAI9B,MAAM,CAAC8B,QAAQ,EAAE;QACjB7B,WAAW,CAAC,CAAC;QACb,OAAOO,SAAS,CAACC,QAAQ,CAAC;MAC9B;MACA,OAAOA,QAAQ;IACnB,CAAC;IAEDL,QAAQ,CAACW,IAAI,IAAIM,WAAW,CAACN,IAAI,CAAC,CAAC;EAEvC,CAAC,EAAE,CAACf,MAAM,EAAEC,WAAW,CAAC,CAAC;EAEzB,OAAO,CAACE,KAAK,EAAEC,QAAQ,EAAEC,WAAW,CAAC;AACzC,CAAC;AAAAH,EAAA,CAjDYH,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}